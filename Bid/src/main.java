
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author liuyang
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GCFolder = new javax.swing.JFrame();
        jLabel3 = new javax.swing.JLabel();
        GCPath = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        GCblockprice = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        blockPriceDisplay = new javax.swing.JLabel();
        numberLabel = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        CompanyConfig = new javax.swing.JFrame();
        Save = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        compTable = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        Result = new javax.swing.JFrame();
        resultdisplay = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        GCFolder.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        GCFolder.setTitle("配置工程");
        GCFolder.setSize(new java.awt.Dimension(700, 360));

        jLabel3.setText("工程文件夹路径：");

        jButton6.setText(" 上一步");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("下一步");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("选择工程文件夹");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel4.setText("拦标价：");

        jButton9.setText("选择拦标价文件夹");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        blockPriceDisplay.setText("共XX项选出项目个数：");

        numberLabel.setText("30");

        jMenu2.setText("文件");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("编辑");
        jMenuBar1.add(jMenu3);

        GCFolder.setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout GCFolderLayout = new javax.swing.GroupLayout(GCFolder.getContentPane());
        GCFolder.getContentPane().setLayout(GCFolderLayout);
        GCFolderLayout.setHorizontalGroup(
            GCFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GCFolderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GCFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GCFolderLayout.createSequentialGroup()
                        .addGroup(GCFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(GCblockprice)
                            .addComponent(GCPath, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(GCFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)))
                    .addGroup(GCFolderLayout.createSequentialGroup()
                        .addGroup(GCFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(GCFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(GCFolderLayout.createSequentialGroup()
                                    .addComponent(blockPriceDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(70, 70, 70)
                                    .addComponent(numberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, GCFolderLayout.createSequentialGroup()
                                    .addGap(501, 501, 501)
                                    .addComponent(jButton6)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton7))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)))
                .addGap(13, 13, 13))
        );
        GCFolderLayout.setVerticalGroup(
            GCFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GCFolderLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(GCFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GCPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(GCFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GCblockprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(GCFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blockPriceDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(GCFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addContainerGap())
        );

        CompanyConfig.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        CompanyConfig.setTitle("配置单位");
        CompanyConfig.setSize(new java.awt.Dimension(860, 350));

        Save.setBorder(javax.swing.BorderFactory.createTitledBorder("配置单位"));

        jButton2.setText("载入单位");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        compTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "名称", "路径"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(compTable);

        javax.swing.GroupLayout SaveLayout = new javax.swing.GroupLayout(Save);
        Save.setLayout(SaveLayout);
        SaveLayout.setHorizontalGroup(
            SaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SaveLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SaveLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        SaveLayout.setVerticalGroup(
            SaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SaveLayout.createSequentialGroup()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );

        jButton4.setText("下一步");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton10.setText("上一步");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CompanyConfigLayout = new javax.swing.GroupLayout(CompanyConfig.getContentPane());
        CompanyConfig.getContentPane().setLayout(CompanyConfigLayout);
        CompanyConfigLayout.setHorizontalGroup(
            CompanyConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CompanyConfigLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addGap(59, 59, 59))
            .addGroup(CompanyConfigLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(Save, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        CompanyConfigLayout.setVerticalGroup(
            CompanyConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CompanyConfigLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(Save, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(CompanyConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton10))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        Result.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        Result.setTitle("结果");
        Result.setSize(new java.awt.Dimension(700, 200));

        resultdisplay.setText("正在生成Excel，正在保存结果......");

        jButton5.setText("确认");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ResultLayout = new javax.swing.GroupLayout(Result.getContentPane());
        Result.getContentPane().setLayout(ResultLayout);
        ResultLayout.setHorizontalGroup(
            ResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResultLayout.createSequentialGroup()
                .addGroup(ResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ResultLayout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(jButton5))
                    .addGroup(ResultLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(resultdisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        ResultLayout.setVerticalGroup(
            ResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResultLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultdisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addGap(19, 19, 19))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("公开 公平 公正");

        jButton1.setText("开始");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       this.transactFromAtoB(this, GCFolder);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser addChooser=new JFileChooser(GCPath.getText());
        addChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        //该方法设置为true允许选择多个文件
        addChooser.setMultiSelectionEnabled(true);
        int returnval=addChooser.showOpenDialog(addChooser);  
        if(returnval==JFileChooser.APPROVE_OPTION)
        {
            File[] files=addChooser.getSelectedFiles();
            for(File f : files){
                if(f.getName().equals("拦标价清单")){
                    String message = "不能选择拦标价";
                    JOptionPane.showMessageDialog(this, message);
                    return;
                }
                companies.add(new GCbillOfQuantities(f.getName(),f.getAbsolutePath()));
            }
        }
                
         mapCompanyToTable(compTable,companies);    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void clearTableContent(JTable tab){
        DefaultTableModel model = (DefaultTableModel) tab.getModel();
        model.setRowCount(0);
    }
    private void addCompanyToTable( JTable tab, GCbillOfQuantities x){
        ArrayList<String> content = new ArrayList<String>();
        content.add(x.getName());
        content.add(x.getPath());
        DefaultTableModel model = (DefaultTableModel) tab.getModel();
        model.addRow(content.toArray());
    }
    private void mapCompanyToTable(JTable tab, List<GCbillOfQuantities> list){
        clearTableContent(tab);
        for(GCbillOfQuantities x : list){
            addCompanyToTable(tab,x);
        }
    }
    
    
    private File  selectFile(String initPath){
       JFileChooser jfc=new JFileChooser(initPath);
       jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES );
       jfc.showDialog(new JLabel(), "选择");
       File file=jfc.getSelectedFile();
       return file;
    }
    
    
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        this.transactFromAtoB(GCFolder, this);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
       File f = this.selectFile("");
       if(f.isDirectory()){
//        System.out.println("文件夹:"+file.getAbsolutePath());
        GCPath.setText(f.getAbsolutePath());
        main.BidName = f.getName();
        System.out.println(main.BidName);
       }else if(f.isFile()){
        String message = "必须为文件夹！";
        JOptionPane.showMessageDialog(this, message);
//        System.out.println("文件:"+file.getAbsolutePath());
       }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        File f = this.selectFile(GCPath.getText());
       if(f.isDirectory()){
//        System.out.println("文件夹:"+file.getAbsolutePath());
        GCblockprice.setText(f.getAbsolutePath());
        blockPriceList = new GCblockPriceQuantities(f.getName(),f.getAbsolutePath());
        
//        System.out.println(blockPriceList.getName());
        blockPriceDisplay.setText("共"+blockPriceList.getQuantitiesList().size()+"项--选出项目个数(输入需小于筛选清单项数目否则按照筛选清单项数计算)：");
       }else if(f.isFile()){
        String message = "必须为文件夹！";
        JOptionPane.showMessageDialog(this, message);
//        System.out.println("文件:"+file.getAbsolutePath());
       }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        number = Integer.valueOf(numberLabel.getText())<=blockPriceList.getQuantitiesList().size()? Integer.valueOf(numberLabel.getText()):blockPriceList.getQuantitiesList().size();
        this.clearTableContent(compTable);
        this.transactFromAtoB(GCFolder, CompanyConfig);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
       companies.clear();
        this.transactFromAtoB(CompanyConfig, GCFolder);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       this.transactFromAtoB(CompanyConfig, Result);
       try {
       resultdisplay.setText("正在生成Excel，正在保存结果......");
       
       GCchecklist =  pick(blockPriceList.getQuantitiesList().size() , number);
       GCUnitPrice = summerizeUnitPrice();
       GCUnitpoints = calculatePoint();
       String savepath = GCPath.getText()+"/汇总.xlsx";
       
       
           exportAll(savepath);
           resultdisplay.setText("正在生成Excel，正在保存结果......");
                Thread.sleep(1000);
                resultdisplay.setText("保存完成！\n文件保存在："+GCPath.getText()+"----> 汇总.xlsx");
            } catch (InterruptedException e) {
            } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame CompanyConfig;
    private javax.swing.JFrame GCFolder;
    private javax.swing.JTextField GCPath;
    private javax.swing.JTextField GCblockprice;
    private javax.swing.JFrame Result;
    private javax.swing.JPanel Save;
    private javax.swing.JLabel blockPriceDisplay;
    private javax.swing.JTable compTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField numberLabel;
    private javax.swing.JLabel resultdisplay;
    // End of variables declaration//GEN-END:variables

    
    //拦标价清单
    static GCblockPriceQuantities blockPriceList;
    
    //decimal formatter
    static DecimalFormat df = new DecimalFormat("0.00");
    ///总表（所有单位，所有项目）
    static List<GCbillOfQuantities> companies = new ArrayList<GCbillOfQuantities>();
    //筛选表
    //<复查--导出excel>
    static List<Integer> GCchecklist = new ArrayList<Integer>();
    //单价表
    static List<List<Double>> GCUnitPrice = new ArrayList<>();
    //打分表
    static List<List<Double>> GCUnitpoints = new ArrayList<>();
    
    static Workbook wb = new XSSFWorkbook();
    static int number = 30 ;
    
    static String BidName = "";
    
    
    private void transactFromAtoB(JFrame A,JFrame B){
        
        A.setVisible(false);
        B.setVisible(true);
    }




    
    
    
    /////////////precrocessed 
    
    ////////////////生成汇总列表
    public static List<Double> summerizePoint(){
        List<Double> summe = new ArrayList<Double>();
        for (int i = 0; i < GCUnitpoints.get(0).size(); i++) {
            double sum = 0.0;
            for (int j = 0; j < GCUnitpoints.size(); j++) {
                sum += GCUnitpoints.get(j).get(i);
            }
            summe.add( Double.valueOf(df.format(sum)) );
        }
        return  summe;
    }
///////////////生成综合单价评分表
    public static List<List<Double>> calculatePoint(){
        List<List<Double>> out = new ArrayList<>();
        for (int i = 0; i < GCUnitPrice.size(); i++) {
            out.add(calculateP(i));
        }
        return out;
    }
    //计算第i项所有单位的分数
    private static List<Double> calculateP(int i ){
        List<Double> out = new ArrayList<Double>();
//        保留两位小数
        for (int j = 0; j < GCUnitPrice.get(i).size(); j++) {
           double x = Double.valueOf(df.format(calculatepoint(discount(calculateOffset(GCUnitPrice.get(i).get(j),calculateBase(GCUnitPrice.get(i))))))) ;
            out.add(x);
        }
        return out;
    }

    //根据checklist里将所有公司的对应单价加入list
    //比较所有list里checklist对应项
    ///把每个公司每一项的得分记录在list里
    ///===综合单价表
    public static List<List<Double>> summerizeUnitPrice(){
        List<List<Double>> GCUnitPrice = new ArrayList<List<Double>>();
             //item
        for (int i = 0; i < GCchecklist.size(); i++) {
            //company
            GCUnitPrice.add(insertUnitPrices(i));
        }
        return  GCUnitPrice;
    }
    ///从checklist里 第x项
    private static List<Double> insertUnitPrices( int x ) {
        List<Double> unitOfCompanies = new ArrayList<Double>();
        for (int i = 0; i < companies.size(); i++) {
            GCbillOfQuantities bill = companies.get(i);
            unitOfCompanies.add(bill.getQuantitiesList().get(x).getUnitPrice());
        }
        return  unitOfCompanies;
    }

    ///////////////////////具体评标办法
    /////////////抽取 number 个项目
    public static List<Integer> pick (int range , int number){
        List<Integer> out = new ArrayList<Integer>();
        Random random = new Random();
        for (int i = 0; i < number; i++) {
            int x = random.nextInt(range);
            while (out.contains(x)){
                x = random.nextInt(range);
            }
            out.add(x);
        }
        out.sort(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                if(o1>o2){
                    return 1;
                }
                else if (o1==o2){
                    return 0;
                }else
                return -1;
            }
        });
        return out;

    }

    ////////////  综合单价评分方法
    ////第i项
    // 计算基准价
    private static double calculateBase(List<Double> unitPrices ){
        double sum = 0.0;
        for (double x: unitPrices ) {
            sum += x;
        }
//        System.out.println("Base :"+ sum/companies.size()*0.97);
        return Double.valueOf(df.format(sum/companies.size()*0.97))  ;
    }
    //计算偏差
    private static double calculateOffset(double unitPrice , double basePrice ){
//        System.out.println("offset :"+(company.getQuantitiesList().get(i).getUnitPrice()/basePrice - 1 ) * 100);
        return (unitPrice/basePrice - 1 ) * 100 ;
    }
    //计算扣分
    private static double discount(double offset ){
        return offset>0? offset* - 0.02 : offset * 0.01;
    }
    //计算得分
    private static double calculatepoint(double discount){
        return discount + 1 >0 ? discount+1 : 0 ;
    }

    public static void exportAll(String path) throws IOException {

        exportblockPrice(blockPriceList);
        for (GCbillOfQuantities bq : companies) {
            exportBillOfQuantities(bq);
        }
        exportchecklist(GCchecklist);
        exportSummerize(companies,GCchecklist,GCUnitPrice,GCUnitpoints);

        File file = new File(path);
        FileOutputStream output = new FileOutputStream(file);
        wb.write(output);
        output.close();

    }

 ///////输出拦标价单项
     private  static  Sheet exportblockPrice(GCblockPriceQuantities bq){
         Sheet sh = wb.createSheet(bq.getName());
         CellStyle style = wb.createCellStyle();
         style.setAlignment(XSSFCellStyle.ALIGN_CENTER);
         int initRow = 0;
         //生成标题
         Row title = sh.createRow(initRow++);
         Cell t = title.createCell(0);
         t.setCellValue(main.BidName);
         
         
         
         Row row = sh.createRow(initRow++);
         Cell cell ;
         int x =0;
         cell = row.createCell(x++);
         cell.setCellValue("工程名称");
         cell.setCellStyle(style);
         cell = row.createCell(x++);
         cell.setCellValue("序号");
         cell.setCellStyle(style);
         cell = row.createCell(x++);
         cell.setCellValue("项目编码");
         cell.setCellStyle(style);
         cell = row.createCell(x++);
         cell.setCellValue("项目名称");
         cell.setCellStyle(style);
         cell = row.createCell(x++);
         cell.setCellValue("计量单位");
         cell.setCellStyle(style);
         cell = row.createCell(x++);
         cell.setCellValue("工程数量");
         cell.setCellStyle(style);


         for (int i = 0; i < bq.getQuantitiesList().size(); i++) {
             row = sh.createRow(initRow++);
             GCblockPriceItemQuantities item = bq.getQuantitiesList().get(i);
             row.createCell(0).setCellValue(item.getGCname());
             row.createCell(1).setCellValue(item.getSerialNumber());
             row.createCell(2).setCellValue(item.getItemCode());
             row.createCell(3).setCellValue(item.getItemName());
             row.createCell(4).setCellValue(item.getUnit());
             row.createCell(5).setCellValue(item.getGcQuantities());
         }
         return sh;


     }

////////输出工程量单项
    private static Sheet exportBillOfQuantities(GCbillOfQuantities bq){
        Sheet sh = wb.createSheet(bq.getName());
        CellStyle style = wb.createCellStyle();
        style.setAlignment(XSSFCellStyle.ALIGN_CENTER);

        Row row = sh.createRow(0);
        Cell cell = row.createCell(0);
        cell.setCellValue("单位");
        cell.setCellStyle(style);

        cell = row.createCell(1);
        cell.setCellValue("工程名称");
        cell.setCellStyle(style);
        cell = row.createCell(2);
        cell.setCellValue("序号");
        cell.setCellStyle(style);
        cell = row.createCell(3);
        cell.setCellValue("项目编码");
        cell.setCellStyle(style);
        cell = row.createCell(4);
        cell.setCellValue("项目名称");
        cell.setCellStyle(style);
        cell = row.createCell(5);
        cell.setCellValue("计量单位");
        cell.setCellStyle(style);
        cell = row.createCell(6);
        cell.setCellValue("工程数量");
        cell.setCellStyle(style);
        cell = row.createCell(7);
        cell.setCellValue("综合单价（元）");
        cell.setCellStyle(style);
        cell = row.createCell(8);
        cell.setCellValue("合价（元）");
        cell.setCellStyle(style);

        for (int i = 0; i < bq.getQuantitiesList().size(); i++) {
            row = sh.createRow(i+1);
            GCItemQuantities item = bq.getQuantitiesList().get(i);
            row.createCell(0).setCellValue(bq.getName());
            row.createCell(1).setCellValue(item.getGCname());
            row.createCell(2).setCellValue(item.getSerialNumber());
            row.createCell(3).setCellValue(item.getItemCode());
            row.createCell(4).setCellValue(item.getItemName());
            row.createCell(5).setCellValue(item.getUnit());
            row.createCell(6).setCellValue(item.getGcQuantities());
            row.createCell(7).setCellValue(item.getUnitPrice());
            row.createCell(8).setCellValue(item.getComboPrice());
        }
        return sh;
    }
//筛选表
    private static Sheet exportchecklist(List<Integer> checklist){
        Sheet sh = wb.createSheet("工程量清单抽取表");
        CellStyle style = wb.createCellStyle();
        style.setAlignment(XSSFCellStyle.ALIGN_CENTER);

        
        int initRow = 0;
        
        Row title = sh.createRow(initRow++);
        Cell t = title.createCell(0);
        t.setCellValue(main.BidName);
        
        
        Row row = sh.createRow(initRow++);
        Cell cell ;
        int x = 0;
        cell = row.createCell(x++);
        cell.setCellValue("工程名称");
        cell.setCellStyle(style);
        cell = row.createCell(x++);
        cell.setCellValue("序号");
        cell.setCellStyle(style);
        cell = row.createCell(x++);
        cell.setCellValue("项目编码");
        cell.setCellStyle(style);
        cell = row.createCell(x++);
        cell.setCellValue("项目名称");
        cell.setCellStyle(style);
        cell = row.createCell(x++);
        cell.setCellValue("计量单位");
        cell.setCellStyle(style);
        cell = row.createCell(x++);
        cell.setCellValue("工程数量");
        cell.setCellStyle(style);

        for (int i = 0; i < checklist.size(); i++) {
            row = sh.createRow(initRow++);
            GCblockPriceItemQuantities item = blockPriceList.getQuantitiesList().get(checklist.get(i));
            row.createCell(0).setCellValue(item.getGCname());
            row.createCell(1).setCellValue(item.getSerialNumber());
            row.createCell(2).setCellValue(item.getItemCode());
            row.createCell(3).setCellValue(item.getItemName());
            row.createCell(4).setCellValue(item.getUnit());
            row.createCell(5).setCellValue(item.getGcQuantities());
        }

        return  sh ;
    }

    private static Sheet exportSummerize(List<GCbillOfQuantities> companies ,List<Integer> checklist, List<List<Double>> GCUnitPrice, List<List<Double>> GCUnitpoints){
        Sheet sh = wb.createSheet("综合单价");
        CellStyle style = wb.createCellStyle();
        style.setAlignment(XSSFCellStyle.ALIGN_CENTER);

        
        int initRow = 0;
         Row title = sh.createRow(initRow++);
         int start = 0;
         Cell t = title.createCell(0+start);
         t.setCellValue(main.BidName);
         
        for(GCbillOfQuantities x : companies){
            t = title.createCell(6+start++);
            t.setCellValue(x.getName());
        } 
        
        Row row = sh.createRow(initRow++);
        Cell cell ;
        int x = 0;
        cell = row.createCell(x++);
        cell.setCellValue("工程名称");
        cell.setCellStyle(style);
        cell = row.createCell(x++);
        cell.setCellValue("序号");
        cell.setCellStyle(style);
        cell = row.createCell(x++);
        cell.setCellValue("项目编码");
        cell.setCellStyle(style);
        cell = row.createCell(x++);
        cell.setCellValue("项目名称");
        cell.setCellStyle(style);
        cell = row.createCell(x++);
        cell.setCellValue("计量单位");
        cell.setCellStyle(style);
        cell = row.createCell(x++);
        cell.setCellValue("工程数量");
        cell.setCellStyle(style);
        //公司名字
        for (int i = 0; i < companies.size(); i++) {
            GCbillOfQuantities c = companies.get(i);
            cell = row.createCell(6+i);
            cell.setCellValue(c.getName());
        }
        cell = row.createCell(6+companies.size());
        cell.setCellValue("基准价");
        cell.setCellStyle(style);
        ///填内容
        int p = 1;
        for (int i = 0; i < checklist.size(); i++) {
            row = sh.createRow(p);
            GCblockPriceItemQuantities item = blockPriceList.getQuantitiesList().get(checklist.get(i));
            row.createCell(0).setCellValue(item.getGCname());
            row.createCell(1).setCellValue(item.getSerialNumber());
            row.createCell(2).setCellValue(item.getItemCode());
            row.createCell(3).setCellValue(item.getItemName());
            row.createCell(4).setCellValue(item.getUnit());
            row.createCell(5).setCellValue(item.getGcQuantities());
//            System.out.println(GCUnitpoints.size());
            for (int j = 0; j < companies.size(); j++) {
                row.createCell(6+j).setCellValue(GCUnitPrice.get(i).get(j));
            }
//            System.out.println(calculateBase(GCUnitPrice.get(i)));
            row.createCell(6+companies.size()).setCellValue(calculateBase(GCUnitPrice.get(i)));
            row = sh.createRow(p+1);
            /////得分
            row.createCell(0).setCellValue("得分: ");
            for (int j = 0; j < companies.size(); j++) {
                row.createCell(6+j).setCellValue(GCUnitpoints.get(i).get(j));
            }

            p+=2;
        }

        row = row = sh.createRow(++p);
        row.createCell(0).setCellValue("总分： ");

        List<Double> summe = summerizePoint();
        for (int j = 0; j < companies.size(); j++) {
            row.createCell(6+j).setCellValue(summe.get(j));
        }
        return sh;
    }
    
    
    
    
    
    
    
    
    
    
    
    




}
